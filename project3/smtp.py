from socket import *import sslimport base64from email.mime.text import MIMETextfrom email.mime.multipart import MIMEMultipartfrom email.mime.base import MIMEBasefrom email import encoders#CHANGE THESE VARIABLES TO YOUR SMTP SERVER CREDENTIALSusername = "[YOUR_EMAIL_HERE]"                      # email for YOUR serverpassword = "[YOUR_EMAIL_PASSWORD_HERE]"             # password for YOUR server, changed heremailFrom = "MAIL FROM:<[EMAIL_FROM_HERE]>\r\n"      # email is sent from of your choosing (not used?)rcptTo = "RCPT TO:<[EMAIL_TO_HERE]>\r\n"            # email sent to of your choosingemail_to = "[EMAIL_TO_HERE]"                        # email of recipient (not used?)subject = '[YOUR_SUBJECT_LINE_HERE]'                # Subject title, Optionalfilename = "[YOUR_IMAGE_FILENAME_HERE]"             # Image filename (MUST BE IN PROJECT FOLDER)body = '[YOUR_MESSAGE_HERE]'                        # message to send, takes precedence over old 'msg' variable belowmsg = "\r\n [MESSAGE_THAT_WILL_NOT_BE_SHOWN_HERE]"  # this msg was used before OPT 2endmsg = "\r\n.\r\n"# Choose a mail server (e.g. Google mail server) and call it mailservermailserver = ('smtp.gmail.com', 587) #Fill in start #Fill in end ## Create socket called clientSocket and establish a TCP connection with mailserver#Fill in startclientSocket = socket(AF_INET, SOCK_STREAM)clientSocket.connect(mailserver)#Fill in endrecv = clientSocket.recv(1024).decode()print('S:   ' + recv)if recv[:3] != '220':    print('220 reply not received from server.\r\n')# Send HELO command and print server response.heloCommand = 'HELO Alice\r\n'print('C:   ' + heloCommand)clientSocket.send(heloCommand.encode())recv1 = clientSocket.recv(1024).decode()print('S:   ' + recv1)if recv1[:3] != '250':    print('250 reply not received from server.')#   OPT 1.1: Send TLS commandstlsCommand = 'STARTTLS\r\n'print('C:   ' + tlsCommand)clientSocket.send(tlsCommand.encode())recvTLS = clientSocket.recv(1024).decode()print('S:   ' + recvTLS)if recv[:3] != '250':    print('220 reply not received from server.')#   OPT 1.2: Send AUTHauthLogin = 'AUTH LOGIN\r\n'print('C:   ' + authLogin)clientSocket = ssl.wrap_socket(clientSocket)clientSocket.send(authLogin.encode())recvAuth = clientSocket.recv(1024).decode()print('S:   ' + recvAuth)if recv[:3] != '250':    print('220 reply not received from server.')#   OPT 1.3: Send USERNAME Login# ^username declared abovebase64_str = username.encode()base64_str = base64.b64encode(base64_str)authUser = base64_str + "\r\n".encode()print('C:   ' + authUser.decode())clientSocket.send(authUser)recv_user = clientSocket.recv(1024).decode()print('S:   ' + recv_user)if recv[:3] != '250':    print('220 reply not received from server.')#   OPT 1.4: Send PASSWORD login# ^password declared abovebase64_str = password.encode()base64_str = base64.b64encode(base64_str)authPass = base64_str + "\r\n".encode()print("C:   " + authPass.decode())clientSocket.send(authPass)recv_pass = clientSocket.recv(1024).decode()print("S:   " + recv_pass)if recv[:3] != '250':    print('220 reply not received from server.')# Send MAIL FROM command and print server response.# Fill in start# ^mailFrom declared aboveprint('C:   ' + mailFrom)clientSocket.send(mailFrom.encode())recv2 = clientSocket.recv(1024).decode()print('S:   ' + recv2)if recv1[:3] != '250':    print('250 reply not received from server.\r\n')# Fill in end# Send RCPT TO command and print server response.# Fill in start# ^rcptTo declared aboveprint('C:   ' + rcptTo)clientSocket.send(rcptTo.encode())recv3 = clientSocket.recv(1024).decode()print('S:   ' + recv3)if recv1[:3] != '250':    print('250 reply not received from server.\r\n')# Fill in end# Send DATA command and print server response.# Fill in startdata = "DATA\r\n"print('C:   ' + data)clientSocket.send(data.encode())recv4 = clientSocket.recv(1024).decode()print('S:   ' + recv4)if recv1[:3] != '250':    print('250 reply not received from server.\r\n')# Fill in end# OPT 2: Send IMAGE and BODYmsg = MIMEMultipart()msg['From'] = usernamemsg['To'] = email_tomsg['Subject'] = subject# ^body declared abovemsg.attach(MIMEText(body, 'plain'))attachment = open(filename, 'rb')part = MIMEBase('application', 'octet-stream')part.set_payload(attachment.read())encoders.encode_base64(part)part.add_header('Content-Disposition', "attachment; filename= " + filename)msg.attach(part)text = msg.as_string()# Send message data.# Fill in startclientSocket.send(text.encode())     # clientSocket.send(msg.encode()) <- before OPT 2# Fill in end# Message ends with a single period.# Fill in startclientSocket.send(endmsg.encode())recv_msg = clientSocket.recv(1024).decode()print(recv_msg)if recv1[:3] != '250':    print('250 reply not received from server.\r\n')# Fill in end# Send QUIT command and get server response.# Fill in startquitMsg = "QUIT\r\n"print('C:   ' + quitMsg)clientSocket.send(quitMsg.encode())recv5 = clientSocket.recv(1024).decode()print('S:   ' + recv5)clientSocket.close()# Fill in end